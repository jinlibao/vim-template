#
# %FFILE%
# %USER%, %FDATE%
#

RM = rm -rf
NVCC = nvcc
NVCCFLAGS =
# NVFLAGS = -gencode arch=compute_37,code=sm_37 # Nvidia K80
# NVFLAGS = -gencode arch=compute_60,code=sm_60 # Nvidia Tesla P100
CC = gcc   # clang icc mpicc mpiicc
CXX = g++  # clang++ mpicxx
CFLAGS = -std=c11 -g -Wall  # -O2 -O3 -m64 -xcore-avx2 -mavx2 -fopt-info-all -ftree-vectorize -arch=native -Wl,--no-as-needed
CXXFLAGS = -std=c++17 -Wall

PKG += /usr /usr/local # /opt/X11
INCLUDE_PATH += $(addsuffix /include, $(PKG))
LD_LIBRARY_PATH += $(addsuffix /lib, $(PKG))
LIBS = stdc++  # m glut GLUT GL armadillo mpi dl pthread mkl_rt openblas
INCLUDES = $(addprefix -I, $(INCLUDE_PATH))
LDFLAGS = $(addprefix -L, $(LD_LIBRARY_PATH))
LDLIBS = $(addprefix -l, $(LIBS))
LD = $(INCLUDES) $(LDFLAGS) $(LDLIBS)

LOCAL_PKG = .
LOCAL_INCLUDE_PATH += $(addsuffix /include, $(LOCAL_PKG))
LOCAL_LD_LIBRARY_PATH += $(addsuffix /lib, $(LOCAL_PKG))
LOCAL_LIBS =
LOCAL_INCLUDES = $(addprefix -I, $(LOCAL_INCLUDE_PATH))
LOCAL_LDFLAGS = $(addprefix -L, $(LOCAL_LD_LIBRARY_PATH))
LOCAL_LDLIBS = $(addprefix -l, $(LOCAL_LIBS))
LOCAL_LD = $(LOCAL_INCLUDES) $(LOCAL_LDFLAGS) $(LOCAL_LDLIBS)

JC = javac
JAVA = java
PC = python3
GO = go build
LATEXMK = latexmk
LMFLAGS = -xelatex -silent
PDFLATEX = pdflatex
XELATEX = xelatex
BIBLATEX = bibtex
PANDOC = pandoc
TEXFLAGS = -interaction=batchmode
PANDOCFLAGS = -f markdown
GITHUB = https://raw.githubusercontent.com/jinlibao/Pandoc_LaTeX_Templates/master/Pandoc-LaTeX%201000/Homework/Template/LaTeX
# OpenGL on macOS
MAC_GLFLAGS = -framework GLUT -framework OpenGL -Wno-deprecated

EXT = *.cc%HERE%
SRC = $(wildcard $(EXT))
# EXT = "*.cc"
# SRC = $(shell find . -maxdepth 1 -name $(EXT))
ALLPROGS = $(basename $(SRC))
OBJFILES = $(ALLPROGS:=.o)
LATEXSRC = $(wildcard *.tex)
TEXFILES = $(basename $(LATEXSRC))

.DEFAULT_GOAL := all

all: $(ALLPROGS)

%: %.cu distclean
	$(NVCC) $(NVFLAGS) -o $@ $<
	srun $@

%: %.c distclean
	$(CC) $(CCFLAGS) -o $@ $<
	./$@

%: %.cpp distclean
	$(CXX) $(CXXFLAGS) -o $@ $< $(LD)
	./$@

%: %.cxx distclean
	$(CXX) $(CXXFLAGS) -o $@ $< $(LD)
	./$@

%: %.cc distclean
	$(CXX) $(CXXFLAGS) -o $@ $< $(LD)
	./$@

%.o: %.cc
	$(CXX) $< -c -fpic

# create static library
%.a: $(OBJFILES)
	ar rcs lib$@ $?

# create dynamic library
%.so: $(OBJFILES)
	$(CXX) $? -shared -o lib$@

%: %.java
	$(JC) $<
	$(JAVA) $@

%: %.go
	$(GO) -o $@ $<

%.pdf: %.tex tex_distclean
	$(LATEXMK) $(LMFLAGS) $<
	# $(XELATEX) $(TEXFLAGS) $<
	# $(BIBLATEX) $(basename $<)
	# $(XELATEX) $(TEXFLAGS) $<
	# $(XELATEX) $(TEXFLAGS) $<

%.tex: %.pdc
	$(PANDOC) $(PANDOCFLAGS) -o $@ $<

makefile_update:
	mv $(MAKEFILE) $(MAKEFILE).old
	wget -q $(GITHUB)/$(MAKEFILE)
	if [ -f $(MAKEFILE) ]; then rm $(MAKEFILE).old; else mv $(MAKEFILE).old $(MAKEFILE); fi

clean:
	$(RM) $(ALLPROGS:=.dSYM) $(ALLPROGS:=.o)

distclean: clean
	$(RM) $(ALLPROGS)

tex_clean:
	$(LATEXMK) -c
	$(RM) $(TEXFILES:=.out) $(TEXFILES:=.blg) $(TEXFILES:=.bbl) $(TEXFILES:=.idx) $(TEXFILES:=.aux) $(TEXFILES:=.log) $(TEXFILES:=.txt)

tex_distclean: tex_clean
	$(LATEXMK) -C
	$(RM) $(TEXFILES:=.pdf)
# vim:ft=make
#
